[gd_scene load_steps=4 format=3 uid="uid://dmcwmj8dpeee4"]

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_bc2gj"]
sky_horizon_color = Color(0.64625, 0.65575, 0.67075, 1)
ground_horizon_color = Color(0.64625, 0.65575, 0.67075, 1)

[sub_resource type="Sky" id="Sky_67yuv"]
sky_material = SubResource("ProceduralSkyMaterial_bc2gj")

[sub_resource type="Environment" id="Environment_oop8v"]
background_mode = 2
sky = SubResource("Sky_67yuv")
tonemap_mode = 2
glow_enabled = true

[node name="Materials" type="Node3D"]

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.866023, -0.433016, 0.250001, 0, 0.499998, 0.866027, -0.500003, 0.749999, -0.43301, 0, 0, 0)
shadow_enabled = true

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_oop8v")

[node name="README" type="Node" parent="."]
editor_description = "This scene introduces automatic material application. In addition to textures, Qodot can apply custom materials to the brush geometry imported from a map file. This is done by coupling materials to texture names, allowing each texture to represent any material type supported by the engine.

Practically speaking, this means storing a material next to its texture file with the same name, at which point Qodot will detect it during build and apply it instead of the default material.

A simple use for this would be overriding the default properties of a `SpatialMaterial`, allowing for the customization of parameters like roughness, metallic and emission. The floor, fence and objects in the corners all use this technique.

You could also couple a dummy texture with a `ShaderMaterial`, allowing that texture to represent some effect instead. The central object uses this technique to apply a shader that visualizes mesh tangents.

Materials can also be loaded without a texture of the same name as a sibling file, but meshes generated with it will lack UVs and any other vertex property that requires texture size to be known at build time."
